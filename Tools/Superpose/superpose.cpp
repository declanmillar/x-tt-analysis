// superpose
// author: Declan Millar

// Superimposes 2 histograms (TH1Ds) from 2 different root files. The
// histograms must have the same name in all files.

#include <iostream>
#include <fstream>
#include <string>
#include <boost/program_options.hpp>

// root includes
#include <TROOT.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TApplication.h>
#include <TAxis.h>
#include <TH1.h>
#include <TFile.h>

namespace po = boost::program_options;

int main(int argc, char *argv[])
{
  // copy argc
  const int args = argc;

  if (args<4)
  {
    std::cout << "usage:  " << argv[0] << "<histName1> " << "<histName2> " << " <fileName1.root> "
    << " <fileName2.root> " << std::endl;
    return 0;
  }

  // compulsory arguments
  std::string histName1;
  std::string histName2;
  std::string fileName1;
  std::string fileName2; 
  std::string epsFileName;

  // optional arguments
  bool epsOutput;
  bool logY;
  bool normalize;
  Double_t rangeMax;
  Double_t rangeMin;

  // set optional arguments
  po::options_description desc("Options for my program");
    desc.add_options()
        ("epsOutput,e", po::value<bool>(& epsOutput)->default_value(false),
            "If true save canvas directly to an eps file.")

        ("logY,l", po::value<bool>(& logY)->default_value(false),
            "If true make y-axis logarithmic scale.")

        ("normalize,n", po::value<bool>(& normalize)->default_value(false),
            "If true normalize histos")

        // both rangeMin and rangeMax must be set simultaneously for any effect.

        ("rangeMin,a", po::value<Double_t>(& rangeMin),
            "The minimum range of the x axis.")

        ("rangeMax,b", po::value<Double_t>(& rangeMax),
            "The maximum range of the x axis.")

        ;

    po::variables_map vm;
    po::store(po::parse_command_line(argc, argv, desc), vm);
    po::notify(vm);

  // local variables
  int nFiles = 2;
  std::string name1;
  std::string name2;

  // print 
  printf("Superimposing %i histograms...\n",nFiles);

  histName1 = argv[1];
  histName2 = argv[2];
  fileName1 = argv[3];  
  fileName2 = argv[4];

  // check strings
  // printf("Argument strings: %s, %s, %s, %s\n",histName.c_str(),
  // fileName1.c_str(),fileName2.c_str());

  name1 = histName1 + '@' + fileName1;
  name2 = histName2 + '@' + fileName2;
  
  // TApplication changes argv so the arguments must have already been copied!
  TApplication* RootApp = new TApplication("RootApp",&argc,argv);

  // change autogenerated gStyle
  gStyle->SetOptStat(0);
  gStyle->SetLegendFont(132);
  gStyle->SetLegendBorderSize(0);
  gStyle->SetOptTitle(0);
  
  // create canvas
  TCanvas *canvas = new TCanvas(histName1.c_str(), histName1.c_str());
  canvas->cd();

  // 1st root file
  TFile f1( fileName1.c_str(), "READ" );
  TH1D *h1 = ( TH1D* )f1.Get( histName1.c_str() );
  h1->SetTitle( fileName1.c_str() );
  h1->Draw();
  h1->SetLineColor( kBlack );
  h1->GetYaxis()->SetTitleOffset( 1.3 );
  h1->GetXaxis()->SetTitleOffset( 1.2 );

  // 2nd root file
  TFile f2( fileName2.c_str(), "READ" );
  TH1D *h2 = ( TH1D* )f2.Get( histName2.c_str() );
  h2->SetTitle( fileName2.c_str() );
  h2->Draw( "SAME" );
  h2->SetLineColor( kRed );

  // normalize histograms
  if ( normalize == true )
  { 
    std::string yTitle;
    yTitle=h1->GetYaxis()->GetTitle();
    yTitle="1/#sigma #times " + yTitle;
    h1->GetYaxis()->SetTitle(yTitle.c_str());
    // printf("yTitle=%s\n",yTitle.c_str());
    h1->Scale(1.0/h1->Integral());
    h2->Scale(1.0/h2->Integral());
    // if ( fileName3 != "NULL" )h3->Scale( 1.0 / h3->Integral() );
  }

  // set range user
  // if( rangeMax == rangeMax && rangeMax == rangeMax )
  // {
  //   h1->GetXaxis()->SetRangeUser( rangeMin ,rangeMax ); 
  //   h2->GetXaxis()->SetRangeUser( rangeMin ,rangeMax );
  //   // if ( fileName3 != "NULL" )h3->GetXaxis()->SetRangeUser( rangeMin ,rangeMax );
  // }
  // printf("%f,%f\n", rangeMin,rangeMax);

  // let logarithmic y axis scale
  if ( logY == true ){ canvas->SetLogy(); }

  // Legend
  canvas->BuildLegend( 0.70 ,0.70 ,0.88 ,0.88 ,"" );
  
  // ROOT app
  if ( epsOutput == false )
  {
    printf("Running ROOT app...\n");
    RootApp->Run( kTRUE );
  }
  else if ( epsOutput == true )
  {
    epsFileName=histName1 + "_2to6_SMMvsSM_EW.eps";
    printf("Saving to %s\n",epsFileName.c_str());
    canvas->SaveAs(epsFileName.c_str());
  }

  // Wrapping up
  printf("Superposition complete. Have a nice day.\n");
  return 0; 
}